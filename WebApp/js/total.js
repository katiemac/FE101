/*------------------------------------------------------------------------------
          HANDLING RETINA
------------------------------------------------------------------------------*/
//  function retinaSize(){

// 	var canvas = document.getElementById("canvas");
// 	var devicePixelRatio = window.devicePixelRatio || 1;

// 	// set the size of the drawingBuffer based on the size it's displayed.
// 	canvas.width = canvas.clientWidth * devicePixelRatio;
// 	canvas.height = canvas.clientHeight * devicePixelRatio;
	   
// 	var gl = canvas.getContext("webgl");

// }



/*------------------------------------------------------------------------------
          DROPDOWNS
------------------------------------------------------------------------------*/

  function DropDown(el) {
    this.dd = el;
    this.initEvents();
  }

  DropDown.prototype = {
    initEvents : function() {
      var obj = this;

      obj.dd.on('click', function(event){
        $(this).toggleClass('active');
        event.stopPropagation();
      }); 
    }
  };

  $(function() {

    var dd = new DropDown( $('.dd') );

    $(document).click(function() {
      // all dropdowns
      $(dd).removeClass('active');
    });

  });

/*------------------------------------------------------------------------------
         CAMAN
------------------------------------------------------------------------------*/

// these are where i put my filters 

Caman.Filter.register("blackAndWhite", function(grey) {

      this.greyscale();
      this.sepia(10);
      this.exposure(10);
      this.contrast(15);
      return this.vignette("60%",35);
  });

Caman.Filter.register("bright", function(grey) {

      this.brightness(7);
      this.exposure(5);
      this.contrast(16);
      return this.vibrance(7);
  });


// Generated by CoffeeScript 1.6.3
(function() {
  var presetBusy, presetCaman, render, renderPreset,
  presetCaman = null;

 
  presetBusy = false;

  renderPreset = function(preset) {
    var $filter, name;
    if (presetBusy) {
      return;
    }
    $("#PresetFilters a").removeClass('Active');
    $filter = $("#PresetFilters a[data-preset='" + preset + "']");
    name = $filter.html();
    $filter.addClass('Active').html('Rendering...');
    presetBusy = true;
    presetCaman.revert(false);
    presetCaman[preset]();
    return presetCaman.render(function() {
      $filter.html(name);
      return presetBusy = false;
    });
  };

  $(document).ready(function() {
    presetCaman = Caman('#preset-example');
    //close modal
    $(" #done ").click(function(){ 
        //grab the context from your destination canvas
        var destCtx = document.getElementById('canvas').getContext('2d');
        destCtx.drawImage(document.getElementById('preset-example'), 0, 0, 600, 600);    
        $("#imageEdit").hide();
    });
    return $('#PresetFilters').on('click', 'a', function() {
    return renderPreset($(this).data('preset'));
    });
  });

}).call(this);


/*------------------------------------------------------------------------------
        to add text from input on to the canvas 
------------------------------------------------------------------------------*/
  // adds the text in canvas, on multiple lines
  // ctx = reference to canvas context
  // text = the text to add
  // x = horizontal position where to start adding the text
  // y = vertical position where to start adding the text
  // maxWidth = the maximum width of the text line
  // lineHeight = the height of the line

  // sets maximum line width, line height, and x /y coords for text
  var cnv1 = document.getElementById('canvas');
  var ctx1 = cnv1.getContext('2d');
  var maxWidth = cnv1.width - 400;
  var lineHeight = 40;
  var x_pos = 15;
  var y_pos = 40;

  function  addTextCnv(ctx, text, x, y, maxWidth, lineHeight) {
  
  if (!text){
    return;
  } //exits the function if there is no text

  // splits the text in words to can wrap it on new lie if exceds maxWidth
    var words = text.split(' ');
    var nr_w = words.length;
    var addtxt = '';

    // sets to add the text and rows
    for(var n = 0; n < nr_w; n++) {
      var txtLine = addtxt + words[n] + ' ';
      var metrics = ctx.measureText(txtLine);
      var txtWidth = metrics.width;
      if (txtWidth > maxWidth && n > 0) {
        ctx.fillText(addtxt, x, y);
        addtxt = words[n] + ' ';
        y += lineHeight;
      }
      else {addtxt = txtLine;}
      }

    // adds the text in canvas (sets text color, font type and size)
    ctx.rect(20,20,150,100);
    ctx.fillStyle = '#333333';
    ctx.font = '30px Tiempos';
    ctx.fillText(addtxt, x, y);
  }




/*------------------------------------------------------------------------------
					CLEAR CANVAS
------------------------------------------------------------------------------*/

	// function to clear the canvas
	// cnv = the object with the canvas element
	function clearCanvas(cnv1) {
		var ctx = cnv1.getContext('2d');     // gets reference to canvas context
		ctx.beginPath();    // clear existing drawing paths
		ctx.save();         // store the current transformation matrix

		  // Use the identity matrix while clearing the canvas
		ctx.setTransform(1, 0, 0, 1, 0, 0);
		ctx.clearRect(0, 0, cnv1.width, cnv1.height);

		ctx.restore();        // restore the transform
	}


/*------------------------------------------------------------------------------
          UPDATE THE CANVAS 
------------------------------------------------------------------------------*/

  function update(){
  	clearCanvas(cnv1); // clears the canvas
  	var destCtx = document.getElementById('canvas').getContext('2d');
    destCtx.drawImage(document.getElementById('preset-example'), 0, 0, 600, 600);  //adds image
    addTextCnv(ctx1, this.value, x_pos, y_pos, maxWidth, lineHeight); // adds the text
  }
  
  update();

  // register onkeyup event for #text_cnv text field to repaint the canvas
  document.getElementById('text_cnv').onkeyup = update;


